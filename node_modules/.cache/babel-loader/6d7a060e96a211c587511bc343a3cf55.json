{"ast":null,"code":"import { ActionTypes } from \"@mui/base\";\nconst initializer = {\n  algorithm: 'bubble',\n  color: '#35c6ff',\n  speed: 100,\n  range: '30',\n  play: false,\n  values: [],\n  timeouts: []\n};\n\nconst updateProps = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initializer;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE_RANGE':\n      {\n        let arr = [];\n\n        for (let i = 0; i < action.range; i++) arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n        return { ...state,\n          range: action.range,\n          values: arr\n        };\n      }\n\n    case 'UPDATE_VALUES':\n      {\n        return { ...state,\n          values: action._values\n        };\n      }\n\n    case 'UPDATE_SPEED':\n      {\n        return { ...state,\n          speed: action.speed\n        };\n      }\n\n    case 'UPDATE_COLOR':\n      {\n        return { ...state,\n          color: action.color\n        };\n      }\n\n    case 'UPDATE_ALGORITHM':\n      {\n        return { ...state,\n          algorithm: action.algorithm\n        };\n      }\n\n    case 'UPDATE_TIEMOUTS':\n      {\n        return { ...state,\n          timeouts: action._timeouts\n        };\n      }\n\n    case 'CHANGE_VALUES':\n      {\n        let arr = [],\n            range = state.range;\n\n        for (let i = 0; i < range; i++) arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n        return { ...state,\n          values: arr\n        };\n      }\n\n    case 'PLAY_PAUSE':\n      {\n        return { ...state,\n          play: action._play\n        };\n      }\n\n    case 'STOP':\n      {\n        // Clear all timeouts\n        state.timeouts.forEach(timeout => clearTimeout(timeout)); // Reset the timeouts array\n\n        return { ...state,\n          timeouts: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default updateProps;","map":{"version":3,"sources":["/workspaces/sorting/src/reducer/updateProps.js"],"names":["ActionTypes","initializer","algorithm","color","speed","range","play","values","timeouts","updateProps","state","action","type","arr","i","push","Math","floor","random","_values","_timeouts","_play","forEach","timeout","clearTimeout"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;AAEA,MAAMC,WAAW,GAAG;AACjBC,EAAAA,SAAS,EAAE,QADM;AAEjBC,EAAAA,KAAK,EAAE,SAFU;AAGjBC,EAAAA,KAAK,EAAE,GAHU;AAIjBC,EAAAA,KAAK,EAAE,IAJU;AAKjBC,EAAAA,IAAI,EAAE,KALW;AAMjBC,EAAAA,MAAM,EAAE,EANS;AAOjBC,EAAAA,QAAQ,EAAE;AAPO,CAApB;;AAUA,MAAMC,WAAW,GAAG,YAAiC;AAAA,MAAhCC,KAAgC,uEAAxBT,WAAwB;AAAA,MAAXU,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,cAAL;AAAqB;AAClB,YAAIC,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACN,KAA3B,EAAkCS,CAAC,EAAnC,EACGD,GAAG,CAACE,IAAJ,CAAS,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,CAAnC,EAAsCJ,CAAtC,CAAT;;AAEH,eAAO,EAAE,GAAGJ,KAAL;AAAYL,UAAAA,KAAK,EAAEM,MAAM,CAACN,KAA1B;AAAiCE,UAAAA,MAAM,EAAEM;AAAzC,SAAP;AACF;;AAED,SAAK,eAAL;AAAsB;AACnB,eAAO,EAAE,GAAGH,KAAL;AAAYH,UAAAA,MAAM,EAAEI,MAAM,CAACQ;AAA3B,SAAP;AACF;;AAED,SAAK,cAAL;AAAqB;AAClB,eAAO,EAAE,GAAGT,KAAL;AAAYN,UAAAA,KAAK,EAAEO,MAAM,CAACP;AAA1B,SAAP;AACF;;AAED,SAAK,cAAL;AAAqB;AAClB,eAAO,EAAE,GAAGM,KAAL;AAAYP,UAAAA,KAAK,EAAEQ,MAAM,CAACR;AAA1B,SAAP;AACF;;AAED,SAAK,kBAAL;AAAyB;AACtB,eAAO,EAAE,GAAGO,KAAL;AAAYR,UAAAA,SAAS,EAAES,MAAM,CAACT;AAA9B,SAAP;AACF;;AAED,SAAK,iBAAL;AAAwB;AACrB,eAAO,EAAE,GAAGQ,KAAL;AAAYF,UAAAA,QAAQ,EAAEG,MAAM,CAACS;AAA7B,SAAP;AACF;;AAED,SAAK,eAAL;AAAsB;AACnB,YAAIP,GAAG,GAAG,EAAV;AAAA,YAAcR,KAAK,GAAGK,KAAK,CAACL,KAA5B;;AACA,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAApB,EAA2BS,CAAC,EAA5B,EACGD,GAAG,CAACE,IAAJ,CAAS,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,CAAnC,EAAsCJ,CAAtC,CAAT;;AACH,eAAO,EAAE,GAAGJ,KAAL;AAAYH,UAAAA,MAAM,EAAEM;AAApB,SAAP;AACF;;AAED,SAAK,YAAL;AAAmB;AAChB,eAAO,EAAE,GAAGH,KAAL;AAAYJ,UAAAA,IAAI,EAAEK,MAAM,CAACU;AAAzB,SAAP;AACF;;AAED,SAAK,MAAL;AAAa;AACV;AACAX,QAAAA,KAAK,CAACF,QAAN,CAAec,OAAf,CAAuBC,OAAO,IAAIC,YAAY,CAACD,OAAD,CAA9C,EAFU,CAGV;;AACA,eAAO,EAAE,GAAGb,KAAL;AAAYF,UAAAA,QAAQ,EAAE;AAAtB,SAAP;AACF;;AAED;AACG,aAAOE,KAAP;AAhDN;AAkDF,CAnDD;;AAqDA,eAAeD,WAAf","sourcesContent":["import { ActionTypes } from \"@mui/base\";\n\nconst initializer = {\n   algorithm: 'bubble',\n   color: '#35c6ff',\n   speed: 100,\n   range: '30',\n   play: false,\n   values: [],\n   timeouts: []\n};\n\nconst updateProps = (state = initializer, action) => {\n   switch (action.type) {\n      case 'UPDATE_RANGE': {\n         let arr = [];\n         for (let i = 0; i < action.range; i++)\n            arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n         return { ...state, range: action.range, values: arr };\n      }\n\n      case 'UPDATE_VALUES': {\n         return { ...state, values: action._values };\n      }\n\n      case 'UPDATE_SPEED': {\n         return { ...state, speed: action.speed };\n      }\n\n      case 'UPDATE_COLOR': {\n         return { ...state, color: action.color };\n      }\n\n      case 'UPDATE_ALGORITHM': {\n         return { ...state, algorithm: action.algorithm };\n      }\n\n      case 'UPDATE_TIEMOUTS': {\n         return { ...state, timeouts: action._timeouts };\n      }\n\n      case 'CHANGE_VALUES': {\n         let arr = [], range = state.range;\n         for (let i = 0; i < range; i++)\n            arr.push([Math.floor(Math.random() * 100) + 1, i]);\n         return { ...state, values: arr };\n      }\n\n      case 'PLAY_PAUSE': {\n         return { ...state, play: action._play };\n      }\n\n      case 'STOP': {\n         // Clear all timeouts\n         state.timeouts.forEach(timeout => clearTimeout(timeout));\n         // Reset the timeouts array\n         return { ...state, timeouts: [] };\n      }\n\n      default:\n         return state;\n   }\n}\n\nexport default updateProps;\n\n"]},"metadata":{},"sourceType":"module"}